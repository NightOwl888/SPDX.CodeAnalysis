name: SPDX.CodeAnalysis

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'releases/v*.*'      # matches releases/v1.2
      - 'releases/v*.*.*'    # matches releases/v1.2.3
      - release-workflow
    tags:
      - 'v*'
  pull_request:
  release:
    types: [published]

jobs:
  build:
    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'push' &&
      (startsWith(github.ref, 'refs/heads/main') ||
      startsWith(github.ref, 'refs/heads/releases/v') ||
      github.ref_type == 'tag'))
    runs-on: windows-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore
        run: dotnet restore

      - name: Build
        shell: pwsh
        run: |
          $nugetOut = "$env:DIST_DIR/nuget"
          dotnet build -c Release --no-restore -p:PackageOutputPath=$nugetOut

      - name: Publish Test Assemblies
        shell: pwsh
        run: |
          $testsOut = "$env:DIST_DIR/testBinaries"
          New-Item -ItemType Directory -Force -Path $testsOut | Out-Null

          # Find all csproj files where a segment is exactly 'Tests'
          Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object {
            Write-Host "Found project: $($_.FullName)"
            $segments = $_.BaseName -split '\.'
            if ($segments -contains 'Tests') {
                $projName = $_.BaseName
                $outDir = Join-Path $testsOut $projName
                New-Item -ItemType Directory -Force -Path $outDir | Out-Null
                Write-Host "Publishing $($_.FullName) -> $outDir"
                dotnet publish $_.FullName -c Release --no-build -o $outDir --verbosity normal
                if ($LASTEXITCODE -ne 0) { throw "Publish failed for $($_.FullName)" }
            }
          }

      - name: Upload NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ${{ env.DIST_DIR }}/nuget

      - name: Upload test assemblies
        uses: actions/upload-artifact@v4
        with:
          name: test-assemblies
          path: ${{ env.DIST_DIR }}/testBinaries
    env:
      DIST_DIR: ${{ github.workspace }}/dist

  release:
    name: Release
    if: github.event_name == 'push' && github.ref_type == 'tag'
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Required for NuGet push
      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Determine the release version from the tag
      - name: Get Tag Version
        id: tagversion
        shell: pwsh
        run: |
          $tag = '${{ github.ref_name }}'
          Write-Host "Git tag: $tag"
          # Remove leading 'v' if present
          if ($tag.StartsWith('v')) { $tag = $tag.Substring(1) }
          Write-Host "Version: $tag"
          echo "version=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      - name: Get Version from NBGV
        id: nbgv
        shell: pwsh
        run: |
          $nbgvOutput = & nbgv get-version
          $nugetVersion = ($nbgvOutput | Where-Object { $_ -match '^NuGetPackageVersion:' }) -replace '^NuGetPackageVersion:\s+', ''
          Write-Host "NuGetPackageVersion: $nugetVersion"
          # Export to GitHub Actions
          "version=$nugetVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      # Download NuGet artifacts from the build job
      - name: Download NuGet Packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: dist/nuget

      - name: Verify Versions Match
        shell: pwsh
        run: |
          $tagVersion = '${{ steps.tagversion.outputs.version }}'
          $repoVersion = '${{ steps.nbgv.outputs.version }}'
    
          if ($tagVersion -ne $repoVersion) {
              throw "Tag version $tagVersion does not match repository version $repoVersion"
          }

          # Also check that all .nupkg files contain the version
          Get-ChildItem dist/nuget/*.nupkg | ForEach-Object {
              if (-not $_.Name.Contains($tagVersion)) {
                  throw "Artifact version mismatch: $($_.Name) vs tag version $tagVersion"
              }
          }

      # Create GitHub Release and attach artifacts
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1.18.0
        with:
          tag: ${{ github.ref_name }}
          draft: true
          allowUpdates: true
          omitBodyDuringUpdate: false
          artifacts: dist/nuget/*.nupkg,dist/nuget/*.snupkg
          makeLatest: true
          token: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: publish
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: release
    steps:
      - run: echo "Publishing release artifacts"
